* Following along with Machine Learning in Python tutorial
http://machinelearningmastery.com/machine-learning-in-python-step-by-step/

See also: http://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf

* Tangling
=C-c C-v t= tangles all code blocks in the file.  Pass a prefix
 argument to only tangle the current block.

** Tangling from the scripts

See: [[http://orgmode.org/manual/Batch-execution.html][org mode batch execution]]

I'm unsure whether it's a good idea to tangle from the scripts.  It
would be nice to attempt to tangle, check if there's a difference, and
then re-run the scripts, e.g. as part of =./script/update=.

It'd also be nice to have tests that check whether the files in the
=script/= directory change as a result of tangling the =README.org=.
If the files change, then the tests should fail because there is an
inconsistency between the intended scripts (the scripts in the
=README.org= are the source of truth) and the scripts in the =script/=
directory.

One solution may be to not check the =script/= directory into version
control.  This would require that users have familiarity with
=org-mode= and tangling.
* Bootstrap
Run with =./script/bootstrap=

** Requirements.txt
#+BEGIN_SRC python :tangle ./requirements.txt
  numpy==1.12.0
  scipy==0.18.1
  matplotlib==2.0.0
  pandas==0.19.2
  scikit-learn==0.18.1
  ipython==5.2.2
#+END_SRC

** Makefile
#+BEGIN_SRC makefile :tangle ./Makefile
  iris.data:
          curl -O https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data
#+END_SRC

** Python virtual environment

Install =python3= if it's not already installed.

#+BEGIN_SRC sh :tangle script/bootstrap :shebang "#!/bin/bash"
  echo "ðŸŒ¯  Updating homebrew to ensure dependencies are installed and upgraded"
  brew update

  if ! brew ls --versions python3 > /dev/null; then
     brew install python3
  fi

  if brew outdated | grep -q python3; then
      brew upgrade python3
  fi
#+END_SRC

Create the virtual env.

#+BEGIN_SRC sh :tangle script/bootstrap :shebang "#!/bin/bash"
  python3 -m venv ./venv
#+END_SRC

Install the requirements to the virtual environment.  If the user is
running =./script/bootstrap= from a shell that is not in the virtual
env, handle it and drop the user into a shell that is running the
virtual environment

#+BEGIN_SRC sh :tangle script/bootstrap :shebang "#!/bin/bash"
  if [ -z ${VIRTUAL_ENV+x} ]; then
      echo "ðŸŒ¯  You're not in the virutal env.  Dropping you into a shell with the virtual env activated."
      source ./venv/bin/activate/
      ./venv/bin/pip install -r ./requirements.txt
      /bin/bash -c ". ./venv/bin/activate; exec /bin/bash -i"
  else
      echo "ðŸŒ¯  Installing requirements to the virtual env"
      ./venv/bin/pip install -r ./requirements.txt
  fi

#+END_SRC


To activate the virtualenv in a shell =source venv/bin/activate=.

Use make to retrieve data dependencies

#+BEGIN_SRC sh :tangle script/bootstrap :shebang "#!/bin/bash"
  make
#+END_SRC

* Setup

Run =./script/setup= for initial setup or to return the project to its
initial state.

#+BEGIN_SRC sh :tangle script/setup :shebang "#!/bin/bash"
  rm -rf ./venv/
  script/bootstrap
#+END_SRC

* Update

Run =./script/update= after pulling to ensure that dependencies and
environment are up to date.

#+BEGIN_SRC sh :tangle script/update :shebang "#!/bin/bash"
  script/bootstrap
#+END_SRC

* Server

* Test

* CI Build

* Console

Run =./script/console= to get a console to the project.

#+BEGIN_SRC sh :tangle script/console :shebang "#!/bin/bash"
  ./venv/bin/ipython
#+END_SRC
